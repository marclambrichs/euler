package nl.arthurjames.euler

/** Problem 12: Highly Divisible Triangular Number
  *
  * The sequence of triangle numbers is generated by adding the natural numbers.
  * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
  * first ten terms would be: 1, 3, 6, 10, 15,21, 28 , 36, 45, 55
  *
  * We can see that 27 is the first triangle number to have over five divisors.
  *
  * What is the value of the first triangle number to have over five hundred
  * divisors?
  *
  * @author:
  *   Marc Lambrichs
  */
@main def euler_0012: Unit =
  val res = time(triangleNrs.find(nrOfFactors(_) > 500).get)
  println(res)

def factors(n: Int): List[Int] =
  val divisors =
    (1 to ((math.sqrt(n).round).toInt)).filter(n % _ == 0)
  (divisors ++ divisors.map(n.toInt / _)).toList.sortWith(_ < _)

def nrOfFactors(n: Int): Int =
  factors(n).length

def triangle(n: Int): Int =
  if n == 0 then 0
  else n + triangle(n - 1)

val triangleNrs = Iterator.from(1).map(triangle)

def time[R](block: => R): R =
  val t0 = System.nanoTime()
  val result = block // call-by-name
  val t1 = System.nanoTime()
  println("Elapsed time: " + (t1 - t0) + "ns")
  result
